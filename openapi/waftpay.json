{
  "openapi": "3.1.0",
  "info": {
    "title": "Waftpay Payments API",
    "description": "Process payments, collect funds, and remit payouts with Waftpay. Includes Authentication Token, idempotency, webhooks, and sandbox support.",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://sandbox.waftpay.io/api",
      "description": "Sandbox"
    },
    {
      "url": "https://authentication.dev.pockets-pay.com",
      "description": "Authentication"
    },
    {
      "url": "https://payments-api.dev.pockets-pay.com",
      "description": "Health"
    },
    {
      "url": "https://payments-tsq-api-service.dev.pockets-pay.com",
      "description": "Status"
    },
    {
      "url": "https://api.waftpay.io",
      "description": "Production"
    }
  ],
  "tags": [
    {
      "name": "Authentication",
      "description": "Obtain and manage access tokens"
    },
    {
      "name": "Payments",
      "description": "Charge a customer and track status"
    },
    {
      "name": "Collections",
      "description": "Customer-initiated payments and hosted checkouts"
    },
    {
      "name": "Remittance",
      "description": "Send payouts to mobile wallets and bank accounts"
    },
    {
      "name": "Webhooks",
      "description": "Receive asynchronous notifications"
    },
    {
      "name": "Utilities",
      "description": "Common utilities (idempotency, health)"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],

  "paths": {
    "/actuator/health": {
      "get": {
        "tags": [
          "Status"
        ],
        "summary": "API health",
        "operationId": "getHealth",
        "description": "Returns overall API health.",
        "security": [],
        "responses": {
          "200": {
            "description": "Healthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "UP",
                        "DOWN"
                      ]
                    },
                    "groups": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "status"
                  ]
                },
                "examples": {
                  "up": {
                    "summary": "UP",
                    "value": {
                      "status": "UP",
                      "groups": [
                        "liveness",
                        "readiness"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },

    "/authentication-service/v1/api/generate-token": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get Authentication token",
        "operationId": "auth-token",
        "description": "Exchange **consumer_key** and **consumer_secret** for a short-lived **Bearer** token.",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "consumer_key",
                  "consumer_secret"
                ],
                "properties": {
                  "consumer_secret": {
                    "type": "string"
                  },
                  "consumer_key": {
                    "type": "string",
                    "format": "password"
                  }
                }
              },
              "examples": {
                "clientCredentials": {
                  "value": {
                    "consumer_key": "APP_CONSUMER_KEY",
                    "consumer_secret": "APP_CONSUMER_SECRET"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Authentication token generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "token",
                    "expires_in"
                  ],
                  "properties": {
                    "status": {
                      "type": "boolean",
                      "example": true,
                      "description": "Indicates if the request was successful"
                    },
                    "message": {
                      "type": "string",
                      "example": "Request processed successfully"
                    },
                    "token": {
                      "type": "string",
                      "description": "JWT bearer token to use in Authorization header"
                    },
                    "expires_in": {
                      "type": "integer",
                      "description": "Token validity in milliseconds",
                      "example": 7200000
                    }
                  }
                },
                "examples": {
                  "ok": {
                    "value": {
                      "status": true,
                      "message": "Request processed successfully",
                      "token": "abcdeFGHIjklmno@1234567890...",
                      "expires_in": 7200000
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid consumer key or secret",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "token",
                    "expires_in"
                  ],
                  "properties": {
                    "status": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid consumer key or secret"
                    },
                    "token": {
                      "type": "string",
                      "example": ""
                    },
                    "expires_in": {
                      "type": "integer",
                      "example": 0
                    }
                  }
                },
                "examples": {
                  "invalidCredentials": {
                    "value": {
                      "status": false,
                      "message": "Invalid consumer key or secret",
                      "token": "",
                      "expires_in": 0
                    }
                  }
                }
              }
            }
          }
        }
      }
    },

    "/payments-api-service/v1/payouts": {
      "post": {
        "tags": [
          "Payouts"
        ],
        "summary": "Initiate Payout",
        "operationId": "initiatePayout",
        "parameters": [
          {
            "$ref": "#/components/parameters/XCustomSignature"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePayoutRequestV2"
              },
              "examples": {
                "default": {
                  "value": {
                    "transaction": {
                      "reference": "TXN213687756272200",
                      "amount": 1000,
                      "currency": "KES",
                      "description": "Test description",
                      "timestamp": "2025-01-21T12:30:10Z"
                    },
                    "originator": {
                      "msisdn": "254708374149",
                      "channel": "USSD",
                      "country": "KE"
                    },
                    "recipient": {
                      "service_code": "MPESAB2C",
                      "reference": "INVJMA02",
                      "account": "254708374149"
                    },
                    "callback_url": "https://merchant.example.com/callbacks/payout",
                    "meta": {}
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayoutInitiationResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },

    "/payments-api-service/v1/user/collections": {
      "post": {
        "tags": ["Collections"],
        "summary": "Initiate Collection",
        "operationId": "initiateCollection",
        "description": "Create a customer collection request. Provide a unique `transaction.reference` for idempotency. Uses the same authentication and signature flow as payouts.",
        "parameters": [
          {
            "$ref": "#/components/parameters/XCustomSignature"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCollectionRequestV1"
              },
              "examples": {
                "default": {
                  "value": {
                    "transaction": {
                      "reference": "TNC000008",
                      "amount": 1000,
                      "currency": "KES",
                      "description": "Test description",
                      "timestamp": "2025-01-21T12:30:10Z"
                    },
                    "originator": {
                      "msisdn": "254712345678",
                      "channel": "USSD",
                      "country": "KE",
                      "name": "John Doe",
                      "purpose": "Salary Payment"
                    },
                    "recipient": {
                      "service_code": "RMT_WU",
                      "invoice_number": "3456789987654",
                      "reference": "INVJMA01",
                      "account": "254712345678"
                    },
                    "callback_url": "https://merchant.example.com/callbacks/collection",
                    "meta": {
                      "note": "This info is returned as part of the callback",
                      "agent_id": "AGENT456"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayoutInitiationResponse"
                },
                "examples": {
                  "accepted": {
                    "summary": "Accepted for processing",
                    "value": {
                      "status": "200.100",
                      "code": "ACCEPTED",
                      "description": "Accepted for processing",
                      "data": {
                        "amount": 1000,
                        "total_charges": 0,
                        "total_amount": 1000,
                        "transaction_reference": "TNC000009",
                        "payment_uuid": "8363546214883574601",
                        "payment_reference": "1RJITP5HLL",
                        "time_received": "2025-04-04T06:13:52.585619Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        }
      }
    },

    "/payments-tsq-service/v1/query/payments": {
      "post": {
        "tags": ["Payouts", "Collections"],
        "summary": "Check Payment Status",
        "operationId": "queryPaymentStatus",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PaymentStatusQueryRequest" },
              "examples": {
                "byTransactionReference": {
                  "value": {
                    "reference": "TXN213687756272200",
                    "reference_type": "transaction_reference",
                    "product": "payout"
                  }
                },
                "byPaymentReference": {
                  "value": {
                    "reference": "1RJITP5HLL",
                    "reference_type": "payment_reference",
                    "product": "collection"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment status",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PayoutStatusResponse" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "$ref": "#/components/responses/NotFound" }
        }
      }
    },

    "/payments-api-service/v1/remittance": {
      "post": {
        "tags": ["Remittance"],
        "summary": "Initiate Remittance",
        "operationId": "initiateRemittance",
        "description": "Create a remittance request. Provide a unique `transaction.reference` for idempotency. Uses the same Bearer authentication and `X-Custom-Signature` convention as payouts/collections.",
        "parameters": [
          { "$ref": "#/components/parameters/XCustomSignature" }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateRemittanceRequestV1" },
              "examples": {
                "default": {
                  "value": {
                    "transaction": {
                      "reference": "TXN123654573",
                      "amount": 100,
                      "currency": "KES",
                      "description": "Test",
                      "timestamp": "2025-01-21 12:30:10"
                    },
                    "originator": {
                      "msisdn": "254722111999",
                      "channel": "Test",
                      "country": "KEN",
                      "Service_provider": "TELCOM-UK",
                      "name": "John Sender",
                      "dob": "1965-01-01",
                      "nationality": "UK",
                      "id_type": "Passport"
                    },
                    "recipient": {
                      "service_code": "ewqeqw",
                      "reference": "Test",
                      "account": "Test",
                      "name": "John Doe Init"
                    },
                    "callback_url": "https://www.google.com",
                    "meta": {
                      "note": "Test",
                      "agent_id": "Test"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PayoutInitiationResponse" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        }
      }
    },

    "/refund-reversal": {
      "post": {
        "tags": ["Refunds"],
        "summary": "Query Refund Reversal",
        "operationId": "queryRefundReversal",
        "description": "Query the status of a refund reversal by request UUID. Returns a standardized APIResponse with status and transaction details when found. If not found, a NOT FOUND-style response is returned in the payload. This endpoint requires a Bearer token.",
        "security": [
          { "bearerAuth": [] }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RefundReversalTsqRequest" },
              "examples": {
                "default": {
                  "value": { "request_uuid": "A333RTYUT" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Refund reversal status payload",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RefundReversalQueryResponse" },
                "examples": {
                  "success": {
                    "value": {
                      "code": 102,
                      "status": "SUCCESS",
                      "description": "Transaction success",
                      "results": {
                        "result_code": "21",
                        "result_description": "The service request is processed successfully",
                        "amount": 1015,
                        "total_charges": 0,
                        "total_amount": "MPESA_KE_MOCK",
                        "account": "254792452002",
                        "original_payment_uuid": "882231418121042119",
                        "original_transaction_reference": "TNC0009886898418",
                        "original_external_reference": "1V1OPZZGHQ",
                        "external_reference": "1V33UUE1IR",
                        "time_processed": "2025-08-26T05:20:27Z"
                      }
                    }
                  },
                  "failed": {
                    "value": {
                      "code": 103,
                      "status": "FAILED",
                      "description": "Transaction Failed",
                      "results": {
                        "result_code": "No response received",
                        "result_description": "HTTP connect timed out",
                        "amount": 100,
                        "total_charges": 1.5,
                        "total_amount": 101.5,
                        "service_code": "MOCK_MPESA_COL",
                        "account": "254712345678",
                        "transaction_reference": "ref-586351566",
                        "payment_uuid": "345836869386794168",
                        "external_reference": null,
                        "time_processed": "2025-09-09T12:29:21.802553127Z",
                        "validation_hash": "dfda0d2ddf4897c7bea679e356be89f1c9fab306fcf22c9bf9c73f635cf05031",
                        "metadata": {
                          "note": "This info is returned as part of the callback",
                          "agent_id": "AGENT456"
                        }
                      }
                    }
                  },
                  "unauthorizedInBody": {
                    "summary": "Authorization failure represented in body (tenant style)",
                    "value": {
                      "code": 401,
                      "status": "FAILED AUTHORIZATION",
                      "description": "Unauthorized",
                      "results": {}
                    }
                  },
                  "notFoundInBody": {
                    "summary": "Not found represented in body (tenant style)",
                    "value": {
                      "code": 404,
                      "status": "NOT FOUND",
                      "description": "Transaction not found",
                      "results": {}
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },

    "/webhooks/waftpay": {
          "post": {
            "tags": [
              "Webhooks"
            ],
            "description": "Receive asynchronous event notifications (payments and payouts). Verify signature via Waftpay-Signature header.",
            "parameters": [
              {
                "name": "Waftpay-Signature",
                "in": "header",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "description": "HMAC signature generated by Waftpay"
              }
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WebhookEvent"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "Acknowledge receipt"
              }
            },
            "security": []
          }
        },

    "/health": {
      "get": {
        "tags": [
          "Utilities"
        ],
        "description": "Health probe for monitoring.",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": []
      }
    }
  },

  "components": {
    "schemas": {
      "Money": {
        "type": "object",
        "required": [
          "amount",
          "currency"
        ],
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Amount in minor units (e.g., cents)"
          },
          "currency": {
            "type": "string",
            "description": "ISO 4217 code (e.g., KES, USD)"
          }
        }
      },

      "Customer": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "phone": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },

      "Meta": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        },
        "description": "Arbitrary key-value metadata"
      },

      "TokenRequest": {
        "type": "object",
        "required": [
          "grant_type",
          "client_id",
          "client_secret"
        ],
        "properties": {
          "grant_type": {
            "type": "string",
            "enum": [
              "client_credentials"
            ]
          },
          "client_id": {
            "type": "string"
          },
          "client_secret": {
            "type": "string"
          }
        }
      },

      "TokenResponse": {
        "type": "object",
        "required": [
          "access_token",
          "token_type",
          "expires_in"
        ],
        "properties": {
          "access_token": {
            "type": "string"
          },
          "token_type": {
            "type": "string",
            "example": "Bearer"
          },
          "expires_in": {
            "type": "integer"
          }
        }
      },

      "CreatePayoutRequestV2": {
        "type": "object",
        "required": [
          "transaction",
          "originator",
          "recipient",
          "callback_url"
        ],
        "properties": {
          "transaction": {
            "type": "object",
            "required": [
              "reference",
              "amount",
              "currency",
              "description",
              "timestamp"
            ],
            "properties": {
              "reference": {
                "type": "string",
                "description": "Client-generated unique reference (idempotency key). Reuse to safely retry."
              },
              "amount": {
                "type": "integer",
                "description": "Amount in major units (e.g., 1000 = 1000 KES)."
              },
              "currency": {
                "type": "string",
                "description": "ISO 4217 currency code in upper-case, e.g., KES, USD."
              },
              "description": {
                "type": "string",
                "description": "Short narrative for the payout."
              },
              "timestamp": {
                "type": "string",
                "format": "date-time",
                "description": "ISO 8601 UTC timestamp. (e.g., 2025-01-21T12:30:10Z)."
              }
            }
          },
          "originator": {
            "type": "object",
            "required": [
              "msisdn",
              "channel",
              "country",
              "name",
              "purpose"
            ],
            "properties": {
              "msisdn": {
                "type": "string",
                "description": "Originator phone number in MSISDN format (e.g., 2547XXXXXXXX)."
              },
              "channel": {
                "type": "string",
                "description": "Channel used to initiate the payout (e.g., USSD, API)."
              },
              "country": {
                "type": "string",
                "description": "Country code (ISO 3166-1 alpha-2 like 'KE' or alpha-3 like 'KEN'). Use what's configured on your account."
              },
              "name": {
                "type": "string",
                "description": "Originator name - preferable two names (e.g., Alvin Muriithi"
              },
              "purpose": {
                "type": "string",
                "description": "Originator purpose or reason for payout"
              }
            }
          },
          "recipient": {
            "type": "object",
            "required": [
              "service_code",
              "reference",
              "account"
            ],
            "properties": {
              "service_code": {
                "type": "string",
                "description": "Service the client wants to consume (e.g., MPESAB2C)."
              },
              "reference": {
                "type": "string",
                "description": "Client-generated unique reference (idempotency key). Reuse to safely retry."
              },
              "account": {
                "type": "string",
                "description": "Recipient account identifier (phone, wallet, bank acct)."
              }
            }
          },
          "callback_url": {
            "type": "string",
            "format": "uri",
            "description": "HTTPS URL to receive final status callbacks."
          },
          "meta": {
            "type": "object",
            "description": "Arbitrary key-value metadata echoed back in callbacks.",
            "additionalProperties": true
          }
        },
        "examples": [
          {
            "transaction": {
              "reference": "TXN213687756272200",
              "amount": 1000,
              "currency": "KES",
              "description": "Vendor payout",
              "timestamp": "2025-01-21T12:30:10Z"
            },
            "originator": {
              "msisdn": "254708374149",
              "channel": "USSD",
              "country": "KE",
              "name": "Payment",
              "purpose": "Transaction Payment"
            },
            "recipient": {
              "service_code": "MPESAB2C",
              "reference": "INVJMA02",
              "account": "254708374149"
            },
            "callback_url": "https://merchant.example.com/callbacks/payout",
            "meta": {
              "note": "This info is returned as part of the callback",
              "agent_id": "AGENT458"
            }
          }
        ]
      },

      "PayoutInitiationResponse": {
        "type": "object",
        "required": [
          "status",
          "code",
          "description",
          "data"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "e.g., 200.100"
          },
          "code": {
            "type": "string",
            "description": "ACCEPTED, REJECTED."
          },
          "description": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "required": [
              "amount",
              "total_charges",
              "total_amount",
              "transaction_reference",
              "payment_uuid",
              "payment_reference",
              "time_received"
            ],
            "properties": {
              "amount": {
                "type": "number"
              },
              "total_charges": {
                "type": "number"
              },
              "total_amount": {
                "type": "number"
              },
              "transaction_reference": {
                "type": "string"
              },
              "payment_uuid": {
                "type": "string",
                "description": "UUID or numeric string identifier."
              },
              "payment_reference": {
                "type": "string"
              },
              "time_received": {
                "type": "string",
                "format": "date-time",
                "description": "ISO 8601 UTC timestamp. **Always ends with 'Z'**."
              }
            },
            "additionalProperties": true
          }
        },
        "examples": {
          "accepted": {
            "summary": "Accepted for processing",
            "value": {
              "status": "200.100",
              "code": "ACCEPTED",
              "description": "Accepted for processing",
              "data": {
                "amount": 1000,
                "total_charges": 0,
                "total_amount": 1000,
                "transaction_reference": "TXN213687756272200",
                "payment_uuid": "8837988760786506492",
                "payment_reference": "1V5ADJM5SO",
                "time_received": "2025-04-04T02:20:44.967336Z"
              }
            }
          },
          "duplicateIgnored": {
            "summary": "Duplicate ignored",
            "value": {
              "status": "200.100",
              "code": "REJECTED",
              "description": "Duplicate payout ignored",
              "data": {
                "transaction_reference": "TXN213687756272200",
                "payment_reference": "1V5ADJM5SO",
                "time_received": "2025-04-04T02:20:44.967336Z"
              }
            }
          },
          "rejected": {
            "summary": "Rejected",
            "value": {
              "status": "400.100",
              "code": "REJECTED",
              "description": "Invalid recipient account number",
              "data": null
            }
          }
        }
      },

      "PayoutStatusResponse": {
        "type": "object",
        "required": [
          "status",
          "code",
          "description",
          "data"
        ],
        "properties": {
          "status": {
            "type": "string"
          },
          "code": {
            "type": "string",
            "description": "E.g., ACCEPTED, NOT_FOUND, FAILED."
          },
          "description": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "required": [
              "transaction_reference",
              "payment_reference",
              "time_received"
            ],
            "properties": {
              "amount": {
                "type": "number"
              },
              "total_charges": {
                "type": "number"
              },
              "total_amount": {
                "type": "number"
              },
              "transaction_reference": {
                "type": "string"
              },
              "payment_uuid": {
                "type": "string"
              },
              "payment_reference": {
                "type": "string"
              },
              "state": {
                "type": "string",
                "description": "processing | succeeded | failed | canceled"
              },
              "time_received": {
                "type": "string",
                "format": "date-time",
                "description": "ISO 8601 UTC timestamp. **Always ends with 'Z'**."
              },
              "last_updated": {
                "type": "string",
                "format": "date-time",
                "description": "ISO 8601 UTC timestamp. **Always ends with 'Z'**."
              }
            },
            "additionalProperties": true
          }
        },
        "examples": {
          "processing": {
            "summary": "Processing",
            "value": {
              "status": "200.100",
              "code": "ACCEPTED",
              "description": "Accepted for processing",
              "data": {
                "amount": 1000,
                "total_charges": 10,
                "total_amount": 1010,
                "transaction_reference": "TXN213687756272200",
                "payment_uuid": "8837988760786506492",
                "payment_reference": "1V5ADJM5SO",
                "state": "processing",
                "time_received": "2025-04-04T02:20:44.967336Z",
                "last_updated": "2025-04-04T02:21:10.100000Z"
              }
            }
          },
          "notFound": {
            "summary": "Not found",
            "value": {
              "status": "400.600",
              "code": "NOT_FOUND",
              "description": "Payout with reference TXN213687756272200 was not found",
              "data": null
            }
          }
        }
      },

      "CreateCollectionRequestV1": {
        "type": "object",
        "required": ["transaction", "originator", "recipient", "callback_url"],
        "properties": {
          "transaction": {
            "type": "object",
            "required": ["reference", "amount", "currency", "description", "timestamp"],
            "properties": {
              "reference": {
                "type": "string",
                "description": "Client-generated unique reference (idempotency key). Reuse to safely retry."
              },
              "amount": {
                "type": "integer",
                "description": "Amount in major units (e.g., 1000 = 1000 KES)."
              },
              "currency": {
                "type": "string",
                "description": "ISO 4217 currency code in upper-case, e.g., KES, USD."
              },
              "description": {
                "type": "string",
                "description": "Short narrative for the collection."
              },
              "timestamp": {
                "type": "string",
                "format": "date-time",
                "description": "ISO 8601 UTC timestamp (e.g., 2025-01-21T12:30:10Z). **Must end with 'Z'**."
              }
            }
          },
          "originator": {
            "type": "object",
            "required": ["msisdn", "channel", "country", "name", "purpose"],
            "properties": {
              "msisdn": {
                "type": "string",
                "description": "Originator phone number in MSISDN format (e.g., 2547XXXXXXXX)."
              },
              "channel": {
                "type": "string",
                "description": "Channel used to initiate the collection (e.g., USSD, API)."
              },
              "country": {
                "type": "string",
                "description": "Country code (ISO 3166-1 like 'KE')."
              },
              "name": {
                "type": "string",
                "description": "Originator/customer full name."
              },
              "purpose": {
                "type": "string",
                "description": "Purpose of the collection (e.g., Salary Payment)."
              }
            }
          },
          "recipient": {
            "type": "object",
            "required": ["service_code", "reference", "account"],
            "properties": {
              "service_code": {
                "type": "string",
                "description": "Service the client wants to consume (e.g., RMT_WU, MPESA_STK)."
              },
              "invoice_number": {
                "type": "string",
                "description": "Optional invoice number associated with the transaction."
              },
              "reference": {
                "type": "string",
                "description": "Client-generated unique reference for recipient context."
              },
              "account": {
                "type": "string",
                "description": "Customer account identifier (phone, wallet, bank account, etc.)."
              }
            }
          },
          "callback_url": {
            "type": "string",
            "format": "uri",
            "description": "HTTPS URL to receive final status callbacks."
          },
          "meta": {
            "type": "object",
            "description": "Arbitrary key-value metadata echoed back in callbacks.",
            "additionalProperties": true
          }
        },
        "examples": [
          {
            "transaction": {
              "reference": "TNC000008",
              "amount": 1000,
              "currency": "KES",
              "description": "Test description",
              "timestamp": "2025-01-21T12:30:10Z"
            },
            "originator": {
              "msisdn": "254712345678",
              "channel": "USSD",
              "country": "KE",
              "name": "John Doe",
              "purpose": "Salary Payment"
            },
            "recipient": {
              "service_code": "RMT_WU",
              "invoice_number": "3456789987654",
              "reference": "INVJMA01",
              "account": "254712345678"
            },
            "callback_url": "https://merchant.example.com/callbacks/collection",
            "meta": {
              "note": "This info is returned as part of the callback",
              "agent_id": "AGENT456"
            }
          }
        ]
      },

      "Payment": {
            "type": "object",
            "required": [
              "id",
              "amount",
              "status",
              "reference",
              "created_at"
            ],
            "properties": {
              "id": {
                "type": "string"
              },
              "amount": {
                "$ref": "#/components/schemas/Money"
              },
              "status": {
                "type": "string",
                "enum": [
                  "pending",
                  "processing",
                  "succeeded",
                  "failed",
                  "canceled"
                ]
              },
              "reference": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "customer": {
                "$ref": "#/components/schemas/Customer"
              },
              "channel": {
                "type": "string",
                "description": "e.g., mobile_money, card"
              },
              "provider": {
                "type": "string",
                "description": "e.g., MPESA, VISA"
              },
              "receipt": {
                "type": "string",
                "description": "Provider receipt or transaction reference"
              },
              "failure_reason": {
                "type": "string"
              },
              "metadata": {
                "$ref": "#/components/schemas/Meta"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              }
            }
          },

      "PaymentStatusQueryRequest": {
        "type": "object",
        "required": ["reference"],
        "properties": {
          "reference": {
            "type": "string",
            "description": "This is either the client-generated transaction reference or the payment UUID."
          }
        },
        "examples": [
          { "reference": "TXN213687756272200", "reference_type": "transaction_reference", "product": "payout" },
          { "reference": "1RJITP5HLL", "reference_type": "payment_reference", "product": "collection" }
        ]
      },

      "ListPaymentsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Payment"
            }
          },
          "has_more": {
            "type": "boolean"
          },
          "next_cursor": {
            "type": "string"
          }
        }
      },

      "CreateCheckoutSessionRequest": {
        "type": "object",
        "required": [
          "amount",
          "success_url",
          "cancel_url"
        ],
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/Money"
          },
          "success_url": {
            "type": "string",
            "format": "uri"
          },
          "cancel_url": {
            "type": "string",
            "format": "uri"
          },
          "customer": {
            "$ref": "#/components/schemas/Customer"
          },
          "reference": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Meta"
          }
        }
      },

      "CheckoutSession": {
        "type": "object",
        "required": [
          "id",
          "status",
          "url",
          "amount"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "created",
              "expired",
              "completed"
            ]
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "amount": {
            "$ref": "#/components/schemas/Money"
          },
          "reference": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },

      "CreatePayoutRequest": {
        "type": "object",
        "required": [
          "amount",
          "destination",
          "reference"
        ],
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/Money"
          },
          "destination": {
            "oneOf": [
              {
                "type": "object",
                "required": [
                  "type",
                  "provider",
                  "msisdn"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "mobile_money"
                    ]
                  },
                  "provider": {
                    "type": "string",
                    "example": "MPESA"
                  },
                  "msisdn": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  }
                }
              },
              {
                "type": "object",
                "required": [
                  "type",
                  "account_number",
                  "bank_code"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "bank_account"
                    ]
                  },
                  "account_number": {
                    "type": "string"
                  },
                  "bank_code": {
                    "type": "string"
                  },
                  "account_name": {
                    "type": "string"
                  }
                }
              }
            ]
          },
          "reference": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Meta"
          },
          "callback_url": {
            "type": "string",
            "format": "uri"
          }
        }
      },

      "ConfirmPayoutRequest": {
        "type": "object",
        "properties": {
          "otp": {
            "type": "string"
          }
        }
      },

      "RefundReversalTsqRequest": {
        "type": "object",
        "required": ["reference"],
        "properties": {
          "reference": {
            "type": "string",
            "description": "Request UUID or token that identifies the refund reversal request (as issued when the reversal was initiated).",
            "example": "A333RTYUT"
          }
        }
      },

      "RefundReversalResults": {
        "type": "object",
        "description": "Provider/platform response fields for a refund reversal query. Fields are optional and may vary by provider.",
        "properties": {
          "result_code": { "type": "string" },
          "result_description": { "type": "string" },
          "amount": { "type": "number" },
          "total_charges": { "type": "number" },
          "total_amount": {
            "oneOf": [
              { "type": "number" },
              { "type": "string" }
            ],
            "description": "Total amount; some providers return labeled strings (e.g., MPESA_KE_MOCK)."
          },
          "service_code": { "type": "string" },
          "account": { "type": "string" },
          "transaction_reference": { "type": "string" },
          "payment_uuid": { "type": "string" },
          "original_payment_uuid": { "type": "string" },
          "original_transaction_reference": { "type": "string" },
          "original_external_reference": { "type": "string" },
          "external_reference": {
            "type": ["string", "null"]
          },
          "time_processed": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 timestamp; may include fractional seconds."
          },
          "validation_hash": { "type": "string" },
          "metadata": {
            "type": "object",
            "additionalProperties": { "type": ["string", "number", "boolean", "null"] },
            "description": "Arbitrary key-value metadata echoed back by the platform/provider."
          }
        },
        "additionalProperties": true
      },

      "RefundReversalQueryResponse": {
        "type": "object",
        "required": ["code", "status", "description", "results"],
        "properties": {
          "code": {
            "type": "integer",
            "description": "Application code for the query result (e.g., 102=SUCCESS, 103=FAILED, 401/404 represented in body where applicable)."
          },
          "status": {
            "type": "string",
            "description": "Outcome label (e.g., SUCCESS, FAILED, FAILED AUTHORIZATION, NOT FOUND)."
          },
          "description": {
            "type": "string",
            "description": "Human-readable description of the outcome."
          },
          "results": {
            "oneOf": [
              { "$ref": "#/components/schemas/RefundReversalResults" },
              {
                "type": "object",
                "description": "Empty results object for non-success outcomes.",
                "additionalProperties": false
              }
            ]
          }
        },
        "examples": {
          "success": {
            "value": {
              "code": 102,
              "status": "SUCCESS",
              "description": "Transaction success",
              "results": {
                "result_code": "21",
                "result_description": "The service request is processed successfully",
                "amount": 1015,
                "total_charges": 0,
                "total_amount": "MPESA_KE_MOCK",
                "account": "254792452002",
                "original_payment_uuid": "882231418121042119",
                "original_transaction_reference": "TNC0009886898418",
                "original_external_reference": "1V1OPZZGHQ",
                "external_reference": "1V33UUE1IR",
                "time_processed": "2025-08-26T05:20:27Z"
              }
            }
          },
          "failed": {
            "value": {
              "code": 103,
              "status": "FAILED",
              "description": "Transaction Failed",
              "results": {
                "result_code": "No response received",
                "result_description": "HTTP connect timed out",
                "amount": 100,
                "total_charges": 1.5,
                "total_amount": 101.5,
                "service_code": "MOCK_MPESA_COL",
                "account": "254712345678",
                "transaction_reference": "ref-586351566",
                "payment_uuid": "345836869386794168",
                "external_reference": null,
                "time_processed": "2025-09-09T12:29:21.802553127Z",
                "validation_hash": "dfda0d2ddf4897c7bea679e356be89f1c9fab306fcf22c9bf9c73f635cf05031",
                "metadata": {
                  "note": "This info is returned as part of the callback",
                  "agent_id": "AGENT456"
                }
              }
            }
          },
          "unauthorizedInBody": {
            "value": {
              "code": 401,
              "status": "FAILED AUTHORIZATION",
              "description": "Unauthorized",
              "results": {}
            }
          },
          "notFoundInBody": {
            "value": {
              "code": 404,
              "status": "NOT FOUND",
              "description": "Transaction not found",
              "results": {}
            }
          }
        }
      },

      "Payout": {
            "type": "object",
            "required": [
              "id",
              "amount",
              "status",
              "reference",
              "created_at"
            ],
            "properties": {
              "id": {
                "type": "string"
              },
              "amount": {
                "$ref": "#/components/schemas/Money"
              },
              "status": {
                "type": "string",
                "enum": [
                  "pending",
                  "processing",
                  "succeeded",
                  "failed",
                  "canceled"
                ]
              },
              "reference": {
                "type": "string"
              },
              "destination": {
                "type": "object"
              },
              "provider": {
                "type": "string"
              },
              "failure_reason": {
                "type": "string"
              },
              "metadata": {
                "$ref": "#/components/schemas/Meta"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              }
            }
          },

      "CreateRemittanceRequestV1": {
        "type": "object",
        "required": ["transaction", "originator", "recipient", "callback_url"],
        "properties": {
          "transaction": {
            "type": "object",
            "required": ["reference", "amount", "currency", "description", "timestamp"],
            "properties": {
              "reference": {
                "type": "string",
                "description": "Client-generated unique reference (idempotency key). Reuse to safely retry."
              },
              "amount": {
                "type": "integer",
                "description": "Amount in major units (e.g., 100 = 100 KES)."
              },
              "currency": {
                "type": "string",
                "description": "ISO 4217 currency code (e.g., KES, USD)."
              },
              "description": {
                "type": "string",
                "description": "Short narrative for the remittance."
              },
              "timestamp": {
                "type": "string",
                "pattern": "^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$",
                "description": "Timestamp in 'YYYY-MM-DD HH:mm:ss' as provided by client (assumed UTC unless configured)."
              }
            }
          },
          "originator": {
            "type": "object",
            "required": ["msisdn", "channel", "country", "Service_provider", "name", "dob", "nationality", "id_type"],
            "properties": {
              "msisdn": {
                "type": "string",
                "description": "Originator phone number in MSISDN format (e.g., 2547XXXXXXXX)."
              },
              "channel": {
                "type": "string",
                "description": "Channel used to initiate the remittance (e.g., USSD, API)."
              },
              "country": {
                "type": "string",
                "description": "Country code; tenant may use ISO-2 (KE) or ISO-3 (KEN). Use what your account is configured for."
              },
              "Service_provider": {
                "type": "string",
                "description": "Sending provider name as used in your corridor (e.g., TELCOM-UK)."
              },
              "name": {
                "type": "string",
                "description": "Originator full name."
              },
              "dob": {
                "type": "string",
                "description": "Date of birth (YYYY-MM-DD)."
              },
              "nationality": {
                "type": "string",
                "description": "Originator nationality (e.g., UK)."
              },
              "id_type": {
                "type": "string",
                "description": "Identification type (e.g., Passport, ID, DL)."
              }
            }
          },
          "recipient": {
            "type": "object",
            "required": ["service_code", "reference", "account", "name"],
            "properties": {
              "service_code": {
                "type": "string",
                "description": "Service to consume (corridor/payout rail code)."
              },
              "reference": {
                "type": "string",
                "description": "Client-generated unique reference for recipient context."
              },
              "account": {
                "type": "string",
                "description": "Recipient account identifier (phone, wallet, bank account, etc.)."
              },
              "name": {
                "type": "string",
                "description": "Recipient full name."
              }
            }
          },
          "callback_url": {
            "type": "string",
            "format": "uri",
            "description": "HTTPS URL to receive final status callbacks."
          },
          "meta": {
            "type": "object",
            "description": "Arbitrary key-value metadata echoed back in callbacks.",
            "additionalProperties": true
          }
        },
        "examples": [
          {
            "transaction": {
              "reference": "TXN123654573",
              "amount": 100,
              "currency": "KES",
              "description": "Test",
              "timestamp": "2025-01-21 12:30:10"
            },
            "originator": {
              "msisdn": "254722111999",
              "channel": "Test",
              "country": "KEN",
              "Service_provider": "TELCOM-UK",
              "name": "John Sender",
              "dob": "1965-01-01",
              "nationality": "UK",
              "id_type": "Passport"
            },
            "recipient": {
              "service_code": "ewqeqw",
              "reference": "Test",
              "account": "Test",
              "name": "John Doe Init"
            },
            "callback_url": "https://www.google.com",
            "meta": {
              "note": "Test",
              "agent_id": "Test"
            }
          }
        ]
      },

      "ListPayoutsResponse": {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Payout"
                }
              },
              "has_more": {
                "type": "boolean"
              },
              "next_cursor": {
                "type": "string"
              }
            }
          },

      "WebhookEvent": {
        "type": "object",
        "required": [
          "id",
          "type",
          "created",
          "data"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "payment.created",
              "payment.succeeded",
              "payment.failed",
              "payment.canceled",
              "payout.created",
              "payout.succeeded",
              "payout.failed",
              "payout.canceled",
              "checkout.completed"
            ]
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "data": {
            "type": "object"
          }
        }
      },

      "Error": {
        "type": "object",
        "required": [
          "error",
          "message"
        ],
        "properties": {
          "error": {
            "type": "string",
            "description": "Machine readable error code"
          },
          "message": {
            "type": "string",
            "description": "Human readable message"
          },
          "param": {
            "type": "string"
          },
          "request_id": {
            "type": "string"
          }
        }
      },

      "WaftpayErrorEnvelope": {
        "type": "object",
        "required": [
          "code",
          "status",
          "description"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "Application code. Can be a top-level code (e.g., 400.600) or a granular code (e.g., 404.001.000)."
          },
          "status": {
            "type": "string",
            "description": "Semantic status, e.g., REJECTED, FAILED, UNAUTHORIZED, FORBIDDEN, NOT_FOUND, ACCEPTED."
          },
          "description": {
            "type": "string",
            "description": "Human-readable description."
          },
          "data": {
            "type": "object",
            "description": "Additional details (may be empty).",
            "additionalProperties": true,
            "nullable": true
          }
        },
        "examples": {
          "notFoundGranular": {
            "summary": "404 with granular code",
            "value": {
              "code": "404.001.000",
              "status": "REJECTED",
              "description": "Requested resource not found",
              "data": {}
            }
          },
          "validationFailed": {
            "summary": "400 validation failed",
            "value": {
              "code": "400.100",
              "status": "REJECTED",
              "description": "Validation failed",
              "data": {
                "field_errors": [
                  {
                    "field": "recipient.account",
                    "message": "Invalid account"
                  }
                ]
              }
            }
          },
          "unauthorized": {
            "summary": "401 failed authentication",
            "value": {
              "code": "400.200",
              "status": "REJECTED",
              "description": "Failed Authentication",
              "data": null
            }
          },
          "forbidden": {
            "summary": "403 failed authorization",
            "value": {
              "code": "403.300",
              "status": "REJECTED",
              "description": "Failed Authorization",
              "data": null
            }
          },
          "internal": {
            "summary": "500 internal server error",
            "value": {
              "code": "400.500",
              "status": "FAILED",
              "description": "Internal server error",
              "data": null
            }
          }
        }
      }
    },

    "parameters": {
      "XCustomSignature": {
        "name": "X-Custom-Signature",
        "in": "header",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "Base64 RSA signature over: transaction.reference + transaction.amount + originator.country + recipient.service_code"
      }
    },

    "responses": {
      "BadRequest": {
        "description": "Bad request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },

      "NotFound": {
        "description": "Resource not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },

      "PayoutRemittanceAccepted202": {
        "description": "Accepted for processing",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PayoutInitiationResponse"
            },
            "examples": {
              "accepted": {
                "value": {
                  "status": "200.100",
                  "code": "ACCEPTED",
                  "description": "Accepted for processing",
                  "data": {
                    "amount": 1000,
                    "total_charges": 0,
                    "total_amount": 1000,
                    "transaction_reference": "TXN213687756272200",
                    "payment_uuid": "8837988760786506492",
                    "payment_reference": "1V5ADJM5SO",
                    "time_received": "2025-04-04T02:20:44.967336Z"
                  }
                }
              }
            }
          }
        }
      },

      "PayoutRemittanceBadRequest400": {
        "description": "Validation Failed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/WaftpayErrorEnvelope"
            },
            "examples": {
              "validationFailed": {
                "value": {
                  "code": "400.100",
                  "status": "REJECTED",
                  "description": "Validation failed",
                  "data": {
                    "field_errors": [
                      {
                        "field": "transaction.timestamp",
                        "message": "Must end with 'Z' (UTC)"
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      },

      "PayoutRemittanceUnauthorized401": {
        "description": "Failed Authentication",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/WaftpayErrorEnvelope"
            },
            "examples": {
              "unauthorized": {
                "value": {
                  "code": "400.200",
                  "status": "REJECTED",
                  "description": "Failed Authentication",
                  "data": null
                }
              }
            }
          }
        }
      },

      "PayoutRemittanceForbidden403": {
        "description": "Failed Authorization",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/WaftpayErrorEnvelope"
            },
            "examples": {
              "forbidden": {
                "value": {
                  "code": "403.300",
                  "status": "REJECTED",
                  "description": "Failed Authorization",
                  "data": null
                }
              }
            }
          }
        }
      },

      "PayoutRemittanceNotFound404": {
        "description": "Resource Not Found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/WaftpayErrorEnvelope"
            },
            "examples": {
              "notFoundGranular": {
                "value": {
                  "code": "404.001.000",
                  "status": "REJECTED",
                  "description": "Requested resource not found",
                  "data": {}
                }
              },
              "notFoundTopLevel": {
                "value": {
                  "code": "400.600",
                  "status": "REJECTED",
                  "description": "Resource not found",
                  "data": {}
                }
              }
            }
          }
        }
      },

      "PayoutRemittanceInternal500": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/WaftpayErrorEnvelope"
            },
            "examples": {
              "internal": {
                "value": {
                  "code": "400.500",
                  "status": "FAILED",
                  "description": "Internal server error",
                  "data": null
                }
              }
            }
          }
        }
      },

      "Unauthorized": {
        "description": "Missing or invalid token",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "unauthorized": {
                "value": {
                  "error": "unauthorized",
                  "message": "Missing or invalid Authorization header",
                  "request_id": "req_123"
                }
              }
            }
          }
        }
      },

      "InternalServerError": {
        "description": "Unexpected server error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "error": {
                "value": {
                  "error": "internal_error",
                  "message": "An unexpected error occurred",
                  "request_id": "req_456"
                }
              }
            }
          }
        }
      }
    },

    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}