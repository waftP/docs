{
  "openapi": "3.1.0",
  "info": {
    "title": "Waftpay Payments API",
    "description": "Process payments, collect funds, and remit payouts with Waftpay. Includes Authentication Token, idempotency, webhooks, and sandbox support.",
    "license": { "name": "MIT" },
    "version": "1.0.0"
  },
  "servers": [
    { "url": "https://sandbox.waftpay.io/api", "description": "Sandbox" },
    { "url": "https://authentication.dev.pockets-pay.com", "description": "Sandbox" },
    { "url": "https://payments-api.dev.pockets-pay.com", "description": "Health" },
    { "url": "https://api.waftpay.io", "description": "Production" }
  ],
  "tags": [
    { "name": "Authentication", "description": "Obtain and manage access tokens" },
    { "name": "Payments", "description": "Charge a customer and track status" },
    { "name": "Collections", "description": "Customer-initiated payments and hosted checkouts" },
    { "name": "Remittance", "description": "Send payouts to mobile wallets and bank accounts" },
    { "name": "Webhooks", "description": "Receive asynchronous notifications" },
    { "name": "Utilities", "description": "Common utilities (idempotency, health)" }
  ],
  "security": [{ "bearerAuth": [] }],
  "paths": {
    "/actuator/health": {
      "get": {
        "tags": ["Status"],
        "summary": "API health",
        "operationId": "getHealth",
        "description": "Returns overall API health.",
        "security": [],
        "responses": {
          "200": {
            "description": "Healthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "enum": ["UP", "DOWN"] },
                    "groups": { "type": "array", "items": { "type": "string" } }
                  },
                  "required": ["status"]
                },
                "examples": {
                  "up": {
                    "summary": "UP",
                    "value": { "status": "UP", "groups": ["liveness", "readiness"] }
                  }
                }
              }
            }
          }
        }
      }
    },

    "/authentication-service/v1/api/generate-token": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Get Authentication token",
        "operationId": "auth-token",
        "description": "Exchange **consumer_key** and **consumer_secret** for a short-lived **Bearer** token.",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["consumer_key", "consumer_secret"],
                "properties": {
                  "consumer_secret": { "type": "string" },
                  "consumer_key": { "type": "string", "format": "password" }
                }
              },
              "examples": {
                "clientCredentials": {
                  "value": {
                    "consumer_key": "APP_CONSUMER_KEY",
                    "consumer_secret": "APP_CONSUMER_SECRET"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Authentication token generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["status", "message", "token", "expires_in"],
                  "properties": {
                    "status": {
                      "type": "boolean",
                      "example": true,
                      "description": "Indicates if the request was successful"
                    },
                    "message": {
                      "type": "string",
                      "example": "Request processed successfully"
                    },
                    "token": {
                      "type": "string",
                      "description": "JWT bearer token to use in Authorization header"
                    },
                    "expires_in": {
                      "type": "integer",
                      "description": "Token validity in milliseconds",
                      "example": 7200000
                    }
                  }
                },
                "examples": {
                  "ok": {
                    "value": {
                      "status": true,
                      "message": "Request processed successfully",
                      "token": "abcdeFGHIjklmno@1234567890...",
                      "expires_in": 7200000
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid consumer key or secret",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["status", "message", "token", "expires_in"],
                  "properties": {
                    "status": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid consumer key or secret"
                    },
                    "token": {
                      "type": "string",
                      "example": ""
                    },
                    "expires_in": {
                      "type": "integer",
                      "example": 0
                    }
                  }
                },
                "examples": {
                  "invalidCredentials": {
                    "value": {
                      "status": false,
                      "message": "Invalid consumer key or secret",
                      "token": "",
                      "expires_in": 0
                    }
                  }
                }
              }
            }
          }
        }
      }
    },

    "/payments-api-service/v1/payouts": {
      "post": {
        "tags": ["Payouts"],
        "summary": "Initiate Payout",
        "operationId": "initiatePayout",
        "parameters": [
          { "$ref": "#/components/parameters/XCustomSignature" }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreatePayoutRequestV2" },
              "examples": {
                "default": {
                  "value": {
                    "transaction": {
                      "reference": "TXN213687756272200",
                      "amount": 1000,
                      "currency": "KES",
                      "description": "Test description",
                      "timestamp": "2025-01-21T12:30:10Z"
                    },
                    "originator": {
                      "msisdn": "254708374149",
                      "channel": "USSD",
                      "country": "KE"
                    },
                    "recipient": {
                      "service_code": "MPESAB2C",
                      "reference": "INVJMA02",
                      "account": "254708374149"
                    },
                    "callback_url": "https://merchant.example.com/callbacks/payout",
                    "meta": {}
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PayoutInitiationResponse" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        }
      }
    },

    "/payments-api-service/v1/payouts/{reference}": {
      "get": {
        "tags": ["Payouts"],
        "summary": "Check Payout Status",
        "operationId": "getPayoutByReference",
        "parameters": [
          { "name": "reference", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "description": "Payout status", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PayoutStatusResponse" } } } },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "$ref": "#/components/responses/NotFound" }
        }
      }
    },

    "/payments/{payment_id}": {
      "get": {
        "tags": ["Payments"],
        "description": "Retrieve a payment by ID.",
        "parameters": [
          {
            "name": "payment_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Payment" }
              }
            }
          },
          "404": { "$ref": "#/components/responses/NotFound" }
        }
      },
      "post": {
        "tags": ["Payments"],
        "description": "Confirm a payment that requires an out-of-band authorization (e.g., STK push / OTP).",
        "parameters": [
          {
            "name": "payment_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ConfirmPaymentRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment updated",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Payment" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "404": { "$ref": "#/components/responses/NotFound" }
        }
      },
      "delete": {
        "tags": ["Payments"],
        "description": "Cancel a payment that is not yet completed.",
        "parameters": [
          {
            "name": "payment_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": { "description": "Payment canceled" },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "404": { "$ref": "#/components/responses/NotFound" }
        }
      }
    },

  "/payments-api-service/v1/collections": {
    "post": {
      "tags": ["Collections"],
      "summary": "Initiate Collection",
      "operationId": "collectionsInitiate",
      "description": "Start a customer payment collection. Returns 202 Accepted on enqueue; final outcome is sent via webhook or available via status query.",
      "requestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/CreateCollectionRequest" },
            "examples": {
              "default": {
                "value": {
                  "transaction": {
                    "reference": "TNC000008",
                    "amount": "1000.00",
                    "currency": "KES",
                    "description": "Test description",
                    "timestamp": "2025-01-21T12:30:10Z"
                  },
                  "originator": {
                    "msisdn": "254712345678",
                    "channel": "USSD",
                    "country": "KE",
                    "name": "John Doe",
                    "purpose": "Salary Payment"
                  },
                  "recipient": {
                    "service_code": "RMT_WU",
                    "invoice_number": "3456789987654",
                    "reference": "INVJMA01",
                    "account": "254712345678"
                  },
                  "callback_url": "https://merchant.example.com/webhooks/payments",
                  "meta": {
                    "note": "This info is returned as part of the callback",
                    "agent_id": "AGENT456"
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "202": {
          "description": "Accepted for processing",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CollectionInitiationResponse" },
              "examples": {
                "accepted": {
                  "value": {
                    "status": "200.100",
                    "code": "ACCEPTED",
                    "description": "Accepted for processing",
                    "data": {
                      "amount": "1000.00",
                      "total_charges": "0.00",
                      "total_amount": "1000.00",
                      "transaction_reference": "TNC000008",
                      "payment_uuid": "8363546214883574601",
                      "payment_reference": "1RJITP5HLL",
                      "time_received": "2025-04-04T06:13:52.585619Z"
                    }
                  }
                }
              }
            }
          }
        },
        "400": { "$ref": "#/components/responses/PayoutRemittanceBadRequest400" },
        "401": { "$ref": "#/components/responses/PayoutRemittanceUnauthorized401" },
        "403": { "$ref": "#/components/responses/PayoutRemittanceForbidden403" },
        "500": { "$ref": "#/components/responses/PayoutRemittanceInternal500" }
      },
      "security": [{ "bearerAuth": [] }],
      "parameters": [
        {
          "name": "X-Idempotency-Key",
          "in": "header",
          "required": false,
          "schema": { "type": "string" },
          "description": "Strongly recommended. Reuse the same value as transaction.reference to dedupe retries."
        }
      ]
    }
  },

  "/payments-tsq-service/v1/query": {
    "post": {
      "tags": ["Collections"],
      "summary": "Check Collection Status",
      "operationId": "collectionsStatusQuery",
      "description": "Query the latest status of a collection. Provide exactly one of transaction_reference or payment_uuid.",
      "requestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/TsqQueryRequest" },
            "examples": {
              "byReference": { "value": { "transaction_reference": "TNC000008" } },
              "byPaymentUuid": { "value": { "payment_uuid": "8363546214883574601" } }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "Status response",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/TsqQueryResponse" },
              "examples": {
                "success": {
                  "value": {
                    "code": 102,
                    "status": "SUCCESS",
                    "description": "Transaction Was Successful",
                    "results": {
                      "result_code": "200",
                      "result_description": "Success",
                      "amount": 30,
                      "total_charges": 10,
                      "total_amount": 200,
                      "service_code": "RMT_WU",
                      "msisdn": "2547987654321",
                      "transaction_reference": "TNC000008",
                      "payment_uuid": "4e61243c-3449-43a3-a17c-b857e40434224",
                      "external_reference": "7947539867548",
                      "time_processed": "2025-06-17T10:18:18.302Z",
                      "validation_hash": "99e4de9b...5d2db92",
                      "metadata": { "Note": "This is part of a callback", "AGENTID": "Agent2" }
                    }
                  }
                },
                "pending": {
                  "value": { "code": 101, "status": "PENDING", "description": "Transaction Is Pending", "results": {} }
                },
                "notFound": {
                  "value": { "code": 404, "status": "NOT FOUND", "description": "Transaction Not Found", "results": {} }
                }
              }
            }
          }
        },
        "401": { "$ref": "#/components/responses/Unauthorized" }
      },
      "security": [{ "bearerAuth": [] }]
    }
  },

  "/refund-reversal": {
    "post": {
      "tags": ["Collections"],
      "summary": "Refund Reversal Status",
      "operationId": "collectionsRefundReversalStatus",
      "description": "Check the status of a refund reversal by request UUID.",
      "requestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/RefundReversalStatusRequest" },
            "examples": { "default": { "value": { "request_uuid": "A333RTYUT" } } }
          }
        }
      },
      "responses": {
        "200": {
          "description": "Refund reversal status",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RefundReversalStatusResponse" }
            }
          }
        },
        "401": { "$ref": "#/components/responses/Unauthorized" }
      },
      "security": [{ "bearerAuth": [] }]
    }
  },

  "/payments-api-service/v1/collections/refunds": {
    "post": {
      "tags": ["Collections"],
      "summary": "Initiate Collection Refund",
      "operationId": "collectionsRefundInitiate",
      "description": "Initiate a refund for a previously succeeded collection.",
      "requestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/RefundInitiateRequest" },
            "examples": {
              "default": {
                "value": {
                  "original": { "transaction_reference": "TNC000008" },
                  "refund": {
                    "amount": "1000.00",
                    "reason_code": "DUPLICATE_CHARGE",
                    "description": "Customer cancelled order #1234",
                    "timestamp": "2025-06-01T09:10:11Z"
                  },
                  "callback_url": "https://merchant.example.com/webhooks/refunds",
                  "meta": { "agent_id": "AGENT789" }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "X-Idempotency-Key",
          "in": "header",
          "required": true,
          "schema": { "type": "string" },
          "description": "Unique refund request key to safely retry."
        }
      ],
      "responses": {
        "202": {
          "description": "Refund accepted for processing",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RefundInitiateResponse" }
            }
          }
        },
        "400": { "$ref": "#/components/responses/PayoutRemittanceBadRequest400" },
        "401": { "$ref": "#/components/responses/PayoutRemittanceUnauthorized401" }
      },
      "security": [{ "bearerAuth": [] }]
    }
  },

"/remittance/payouts": {
      "post": {
        "tags": ["Remittance"],
        "description": "Create a payout to a mobile wallet or bank account.",
        "parameters": [
          {
            "name": "Idempotency-Key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreatePayoutRequest" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Payout created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Payout" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" }
        }
      },
      "get": {
        "tags": ["Remittance"],
        "description": "List payouts with pagination.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "default": 20 }
          },
          {
            "name": "starting_after",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "status",
            "in": "query",
            "schema": { "type": "string", "enum": ["pending", "processing", "succeeded", "failed", "canceled"] }
          }
        ],
        "responses": {
          "200": {
            "description": "List of payouts",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ListPayoutsResponse" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" }
        }
      }
    },

    "/remittance/payouts/{payout_id}": {
      "get": {
        "tags": ["Remittance"],
        "description": "Retrieve a payout.",
        "parameters": [
          { "name": "payout_id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "description": "Payout", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Payout" } } } },
          "404": { "$ref": "#/components/responses/NotFound" }
        }
      },
      "post": {
        "tags": ["Remittance"],
        "description": "Confirm a payout (if additional confirmation is required).",
        "parameters": [
          { "name": "payout_id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "requestBody": {
          "required": false,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ConfirmPayoutRequest" } } }
        },
        "responses": {
          "200": { "description": "Payout updated", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Payout" } } } },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "404": { "$ref": "#/components/responses/NotFound" }
        }
      },
      "delete": {
        "tags": ["Remittance"],
        "description": "Cancel a payout that has not been sent.",
        "parameters": [
          { "name": "payout_id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "204": { "description": "Payout canceled" },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "404": { "$ref": "#/components/responses/NotFound" }
        }
      }
    },

    "/webhooks/waftpay": {
      "post": {
        "tags": ["Webhooks"],
        "description": "Receive asynchronous event notifications (payments and payouts). Verify signature via `Waftpay-Signature` header.",
        "parameters": [
          {
            "name": "Waftpay-Signature",
            "in": "header",
            "required": true,
            "schema": { "type": "string" },
            "description": "HMAC signature generated by Waftpay"
          }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/WebhookEvent" } } }
        },
        "responses": {
          "200": { "description": "Acknowledge receipt" }
        },
        "security": []
      }
    },

    "/health": {
      "get": {
        "tags": ["Utilities"],
        "description": "Health probe for monitoring.",
        "responses": { "200": { "description": "OK" } },
        "security": []
      }
    }
  },

  "components": {
    "schemas": {
      "CreateCollectionRequest": {
      "type": "object",
      "required": ["transaction", "originator", "recipient", "callback_url"],
      "properties": {
        "transaction": {
          "type": "object",
          "required": ["reference", "amount", "currency", "description", "timestamp"],
          "properties": {
            "reference": { "type": "string", "description": "Client unique reference; reuse for idempotent retries." },
            "amount": { "type": "string", "pattern": "^[0-9]+\\.[0-9]{2}$", "description": "Decimal string with two decimals." },
            "currency": { "type": "string", "description": "ISO 4217 (e.g., KES)" },
            "description": { "type": "string" },
            "timestamp": { "type": "string", "format": "date-time", "description": "RFC3339 UTC timestamp, ends with Z (e.g., 2025-01-21T12:30:10Z)" }
          }
        },
        "originator": {
          "type": "object",
          "required": ["msisdn", "channel", "country"],
          "properties": {
            "msisdn": { "type": "string", "description": "E.164 without '+' (e.g., 2547XXXXXXX)" },
            "channel": { "type": "string" },
            "country": { "type": "string", "description": "ISO-3166-1 alpha-2 (e.g., KE)" },
            "name": { "type": "string" },
            "purpose": { "type": "string" }
          }
        },
        "recipient": {
          "type": "object",
          "required": ["service_code", "reference", "account"],
          "properties": {
            "service_code": { "type": "string" },
            "invoice_number": { "type": "string" },
            "reference": { "type": "string" },
            "account": { "type": "string" }
          }
        },
        "callback_url": { "type": "string", "format": "uri" },
        "meta": { "type": "object", "additionalProperties": { "type": "string" } }
      }
      },

      "CollectionInitiationResponse": {
      "type": "object",
      "required": ["status", "code", "description", "data"],
      "properties": {
        "status": { "type": "string" },
        "code": { "type": "string" },
        "description": { "type": "string" },
        "data": {
          "type": "object",
          "required": ["amount", "total_charges", "total_amount", "transaction_reference", "payment_uuid", "payment_reference", "time_received"],
          "properties": {
            "amount": { "type": "string" },
            "total_charges": { "type": "string" },
            "total_amount": { "type": "string" },
            "transaction_reference": { "type": "string" },
            "payment_uuid": { "type": "string" },
            "payment_reference": { "type": "string" },
            "time_received": { "type": "string", "format": "date-time", "description": "RFC3339 UTC (ends with Z)" }
          },
          "additionalProperties": true
        }
      }
      },

      "TsqQueryRequest": {
      "type": "object",
      "oneOf": [
        { "required": ["transaction_reference"] },
        { "required": ["payment_uuid"] }
      ],
      "properties": {
        "transaction_reference": { "type": "string" },
        "payment_uuid": { "type": "string" }
      }
      },

      "TsqQueryResponse": {
      "type": "object",
      "required": ["code", "status", "description", "results"],
      "properties": {
        "code": { "type": "integer" },
        "status": { "type": "string" },
        "description": { "type": "string" },
        "results": {
          "type": "object",
          "additionalProperties": true
        }
      }
      },

      "RefundInitiateRequest": {
      "type": "object",
      "required": ["original", "refund", "callback_url"],
      "properties": {
        "original": {
          "type": "object",
          "properties": {
            "transaction_reference": { "type": "string" },
            "payment_uuid": { "type": "string" }
          },
          "oneOf": [
            { "required": ["transaction_reference"] },
            { "required": ["payment_uuid"] }
          ]
        },
        "refund": {
          "type": "object",
          "required": ["amount", "reason_code", "timestamp"],
          "properties": {
            "amount": { "type": "string", "pattern": "^[0-9]+\\.[0-9]{2}$" },
            "reason_code": {
              "type": "string",
              "enum": ["DUPLICATE_CHARGE", "CUSTOMER_REQUEST", "OPERATOR_MANDATE", "AMOUNT_ERROR", "OTHER"]
            },
            "description": { "type": "string" },
            "timestamp": { "type": "string", "format": "date-time", "description": "RFC3339 UTC, ends with Z" }
          }
        },
        "callback_url": { "type": "string", "format": "uri" },
        "meta": { "type": "object", "additionalProperties": { "type": "string" } }
      }
      },

      "RefundInitiateResponse": {
      "type": "object",
      "required": ["code", "status", "description", "results"],
      "properties": {
        "code": { "type": "integer", "example": 102 },
        "status": { "type": "string", "example": "ACCEPTED" },
        "description": { "type": "string" },
        "results": {
          "type": "object",
          "properties": {
            "request_uuid": { "type": "string" },
            "transaction_reference": { "type": "string" },
            "payment_uuid": { "type": "string" },
            "time_received": { "type": "string", "format": "date-time", "example": "2025-06-01T09:10:11Z" }
          },
          "additionalProperties": true
        }
      }
      },

      "RefundReversalStatusRequest": {
      "type": "object",
      "required": ["request_uuid"],
      "properties": { "request_uuid": { "type": "string" } }
      },

      "RefundReversalStatusResponse": {
      "type": "object",
      "required": ["code", "status", "description", "results"],
      "properties": {
        "code": { "type": "integer" },
        "status": { "type": "string" },
        "description": { "type": "string" },
        "results": {
          "type": "object",
          "additionalProperties": true,
          "example": {
            "result_code": "21",
            "result_description": "The service request is processed successfully",
            "amount": 1015,
            "total_charges": 0,
            "total_amount": "1015",
            "account": "254792452002",
            "original_payment_uuid": "882231418121042119",
            "original_transaction_reference": "TNC0009886898418",
            "original_external_reference": "1V1OPZZGHQ",
            "external_reference": "1V33UUE1IR",
            "time_processed": "2025-08-26T05:20:27Z"
          }
        }
      }
      },

      "Money": {
          "type": "object",
          "required": ["amount", "currency"],
          "properties": {
            "amount": { "type": "integer", "description": "Amount in minor units (e.g., cents)" },
            "currency": { "type": "string", "description": "ISO 4217 code (e.g., KES, USD)" }
          }
        },

      "Customer": {
        "type": "object",
        "properties": {
          "email": { "type": "string", "format": "email" },
          "phone": { "type": "string" },
          "name": { "type": "string" }
        }
      },

      "Meta": {
        "type": "object",
        "additionalProperties": { "type": "string" },
        "description": "Arbitrary key-value metadata"
      },

      "TokenRequest": {
        "type": "object",
        "required": ["grant_type", "client_id", "client_secret"],
        "properties": {
          "grant_type": { "type": "string", "enum": ["client_credentials"] },
          "client_id": { "type": "string" },
          "client_secret": { "type": "string" }
        }
      },

      "TokenResponse": {
        "type": "object",
        "required": ["access_token", "token_type", "expires_in"],
        "properties": {
          "access_token": { "type": "string" },
          "token_type": { "type": "string", "example": "Bearer" },
          "expires_in": { "type": "integer" }
        }
      },

      "CreatePayoutRequestV2": {
        "type": "object",
        "required": ["transaction", "originator", "recipient", "callback_url"],
        "properties": {
          "transaction": {
            "type": "object",
            "required": ["reference", "amount", "currency", "description", "timestamp"],
            "properties": {
              "reference": {
                "type": "string",
                "description": "Client-generated unique reference (idempotency key). Reuse to safely retry."
              },
              "amount": {
                "type": "integer",
                "description": "Amount in major units (e.g., 1000 = 1000 KES)."
              },
              "currency": {
                "type": "string",
                "description": "ISO 4217 currency code in upper-case, e.g., KES, USD."
              },
              "description": {
                "type": "string",
                "description": "Short narrative for the payout."
              },
              "timestamp": {
                "type": "string",
                "format": "date-time",
                "description": "ISO 8601 UTC timestamp. (e.g., 2025-01-21T12:30:10Z)."
              }
            }
          },
          "originator": {
            "type": "object",
            "required": ["msisdn", "channel", "country", "name", "purpose"],
            "properties": {
              "msisdn": {
                "type": "string",
                "description": "Originator phone number in MSISDN format (e.g., 2547XXXXXXXX)."
              },
              "channel": {
                "type": "string",
                "description": "Channel used to initiate the payout (e.g., USSD, API)."
              },
              "country": {
                "type": "string",
                "description": "Country code (ISO 3166-1 alpha-2 like 'KE' or alpha-3 like 'KEN'). Use what's configured on your account."
              },
              "name": {
                "type": "string",
                "description": "Originator name - preferable two names (e.g., Alvin Muriithi"
              },
              "purpose": {
                "type": "string",
                "description": "Originator purpose or reason for payout"}
            }
          },
          "recipient": {
            "type": "object",
            "required": ["service_code", "reference", "account"],
            "properties": {
              "service_code": {
                "type": "string",
                "description": "Service the client wants to consume (e.g., MPESAB2C)."
              },
              "pay_bill_number": {
                "type": "string",
                "description": "Optional paybill number, if applicable."
              },
              "account": {
                "type": "string",
                "description": "Recipient account identifier (phone, wallet, bank acct)."
              }
            }
          },
          "callback_url": {
            "type": "string",
            "format": "uri",
            "description": "HTTPS URL to receive final status callbacks."
          },
          "meta": {
            "type": "object",
            "description": "Arbitrary key-value metadata echoed back in callbacks.",
            "additionalProperties": true
          }
        },
        "examples": [
          {
            "transaction": {
              "reference": "TXN213687756272200",
              "amount": 1000,
              "currency": "KES",
              "description": "Vendor payout",
              "timestamp": "2025-01-21T12:30:10Z"
            },
            "originator": {
              "msisdn": "254708374149",
              "channel": "USSD",
              "country": "KE",
              "name": "Payment",
              "purpose": "Transaction Payment"
            },
            "recipient": {
              "service_code": "MPESAB2C",
              "pay_bill_number": "600987",
              "store_number": "600987",
              "reference": "INVJMA02",
              "account": "254708374149"
            },
            "callback_url": "https://merchant.example.com/callbacks/payout",
            "meta": {
              "note": "This info is returned as part of the callback",
              "agent_id": "AGENT458"
            }
          }
        ]
      },

      "PayoutInitiationResponse": {
        "type": "object",
        "required": ["status", "code", "description", "data"],
        "properties": {
          "status": { "type": "string", "description": "e.g., 200.100" },
          "code": {
            "type": "string",
            "description": "ACCEPTED, REJECTED, or DUPLICATE_IGNORED."
          },
          "description": { "type": "string" },
          "data": {
            "type": "object",
            "required": ["amount", "total_charges", "total_amount", "transaction_reference", "payment_uuid", "payment_reference", "time_received"],
            "properties": {
              "amount": { "type": "number" },
              "total_charges": { "type": "number" },
              "total_amount": { "type": "number" },
              "transaction_reference": { "type": "string" },
              "payment_uuid": { "type": "string", "description": "UUID or numeric string identifier." },
              "payment_reference": { "type": "string" },
              "time_received": {
                "type": "string",
                "format": "date-time",
                "description": "ISO 8601 UTC timestamp. **Always ends with 'Z'**."
              }
            },
            "additionalProperties": true
          }
        },
        "examples": {
          "accepted": {
            "summary": "Accepted for processing",
            "value": {
              "status": "200.100",
              "code": "ACCEPTED",
              "description": "Accepted for processing",
              "data": {
                "amount": 1000,
                "total_charges": 0,
                "total_amount": 1000,
                "transaction_reference": "TXN213687756272200",
                "payment_uuid": "8837988760786506492",
                "payment_reference": "1V5ADJM5SO",
                "time_received": "2025-04-04T02:20:44.967336Z"
              }
            }
          },
          "duplicateIgnored": {
            "summary": "Duplicate ignored",
            "value": {
              "status": "200.100",
              "code": "DUPLICATE_IGNORED",
              "description": "Duplicate payout ignored",
              "data": {
                "transaction_reference": "TXN213687756272200",
                "payment_reference": "1V5ADJM5SO",
                "time_received": "2025-04-04T02:20:44.967336Z"
              }
            }
          },
          "rejected": {
            "summary": "Rejected",
            "value": {
              "status": "400.100",
              "code": "REJECTED",
              "description": "Invalid recipient account number",
              "data": null
            }
          }
        }
      },

      "PayoutStatusResponse": {
        "type": "object",
        "required": ["status", "code", "description", "data"],
        "properties": {
          "status": { "type": "string" },
          "code": { "type": "string", "description": "E.g., ACCEPTED, NOT_FOUND, FAILED." },
          "description": { "type": "string" },
          "data": {
            "type": "object",
            "required": ["transaction_reference", "payment_reference", "time_received"],
            "properties": {
              "amount": { "type": "number" },
              "total_charges": { "type": "number" },
              "total_amount": { "type": "number" },
              "transaction_reference": { "type": "string" },
              "payment_uuid": { "type": "string" },
              "payment_reference": { "type": "string" },
              "state": {
                "type": "string",
                "description": "processing | succeeded | failed | canceled"
              },
              "time_received": {
                "type": "string",
                "format": "date-time",
                "description": "ISO 8601 UTC timestamp. **Always ends with 'Z'**."
              },
              "last_updated": {
                "type": "string",
                "format": "date-time",
                "description": "ISO 8601 UTC timestamp. **Always ends with 'Z'**."
              }
            },
            "additionalProperties": true
          }
        },
        "examples": {
          "processing": {
            "summary": "Processing",
            "value": {
              "status": "200.100",
              "code": "ACCEPTED",
              "description": "Accepted for processing",
              "data": {
                "amount": 1000,
                "total_charges": 10,
                "total_amount": 1010,
                "transaction_reference": "TXN213687756272200",
                "payment_uuid": "8837988760786506492",
                "payment_reference": "1V5ADJM5SO",
                "state": "processing",
                "time_received": "2025-04-04T02:20:44.967336Z",
                "last_updated": "2025-04-04T02:21:10.100000Z"
              }
            }
          },
          "notFound": {
            "summary": "Not found",
            "value": {
              "status": "400.600",
              "code": "NOT_FOUND",
              "description": "Payout with reference TXN213687756272200 was not found",
              "data": null
            }
          }
        }
      },

      "Payment": {
        "type": "object",
        "required": ["id", "amount", "status", "reference", "created_at"],
        "properties": {
          "id": { "type": "string" },
          "amount": { "$ref": "#/components/schemas/Money" },
          "status": { "type": "string", "enum": ["pending", "processing", "succeeded", "failed", "canceled"] },
          "reference": { "type": "string" },
          "description": { "type": "string" },
          "customer": { "$ref": "#/components/schemas/Customer" },
          "channel": { "type": "string", "description": "e.g., mobile_money, card" },
          "provider": { "type": "string", "description": "e.g., MPESA, VISA" },
          "receipt": { "type": "string", "description": "Provider receipt or transaction reference" },
          "failure_reason": { "type": "string" },
          "metadata": { "$ref": "#/components/schemas/Meta" },
          "created_at": { "type": "string", "format": "date-time" },
          "updated_at": { "type": "string", "format": "date-time" }
        }
      },

      "ListPaymentsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Payment" }
          },
          "has_more": { "type": "boolean" },
          "next_cursor": { "type": "string" }
        }
      },

      "CreateCheckoutSessionRequest": {
        "type": "object",
        "required": ["amount", "success_url", "cancel_url"],
        "properties": {
          "amount": { "$ref": "#/components/schemas/Money" },
          "success_url": { "type": "string", "format": "uri" },
          "cancel_url": { "type": "string", "format": "uri" },
          "customer": { "$ref": "#/components/schemas/Customer" },
          "reference": { "type": "string" },
          "metadata": { "$ref": "#/components/schemas/Meta" }
        }
      },

      "CheckoutSession": {
        "type": "object",
        "required": ["id", "status", "url", "amount"],
        "properties": {
          "id": { "type": "string" },
          "status": { "type": "string", "enum": ["created", "expired", "completed"] },
          "url": { "type": "string", "format": "uri" },
          "amount": { "$ref": "#/components/schemas/Money" },
          "reference": { "type": "string" },
          "created_at": { "type": "string", "format": "date-time" }
        }
      },

      "CreatePayoutRequest": {
        "type": "object",
        "required": ["amount", "destination", "reference"],
        "properties": {
          "amount": { "$ref": "#/components/schemas/Money" },
          "destination": {
            "oneOf": [
              {
                "type": "object",
                "required": ["type", "provider", "msisdn"],
                "properties": {
                  "type": { "type": "string", "enum": ["mobile_money"] },
                  "provider": { "type": "string", "example": "MPESA" },
                  "msisdn": { "type": "string" },
                  "name": { "type": "string" }
                }
              },
              {
                "type": "object",
                "required": ["type", "account_number", "bank_code"],
                "properties": {
                  "type": { "type": "string", "enum": ["bank_account"] },
                  "account_number": { "type": "string" },
                  "bank_code": { "type": "string" },
                  "account_name": { "type": "string" }
                }
              }
            ]
          },
          "reference": { "type": "string" },
          "description": { "type": "string" },
          "metadata": { "$ref": "#/components/schemas/Meta" },
          "callback_url": { "type": "string", "format": "uri" }
        }
      },

      "ConfirmPayoutRequest": {
        "type": "object",
        "properties": {
          "otp": { "type": "string" }
        }
      },

      "Payout": {
        "type": "object",
        "required": ["id", "amount", "status", "reference", "created_at"],
        "properties": {
          "id": { "type": "string" },
          "amount": { "$ref": "#/components/schemas/Money" },
          "status": { "type": "string", "enum": ["pending", "processing", "succeeded", "failed", "canceled"] },
          "reference": { "type": "string" },
          "destination": { "type": "object" },
          "provider": { "type": "string" },
          "failure_reason": { "type": "string" },
          "metadata": { "$ref": "#/components/schemas/Meta" },
          "created_at": { "type": "string", "format": "date-time" },
          "updated_at": { "type": "string", "format": "date-time" }
        }
      },

      "ListPayoutsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Payout" }
          },
          "has_more": { "type": "boolean" },
          "next_cursor": { "type": "string" }
        }
      },

      "WebhookEvent": {
        "type": "object",
        "required": ["id", "type", "created", "data"],
        "properties": {
          "id": { "type": "string" },
          "type": {
            "type": "string",
            "enum": [
              "payment.created",
              "payment.succeeded",
              "payment.failed",
              "payment.canceled",
              "payout.created",
              "payout.succeeded",
              "payout.failed",
              "payout.canceled",
              "checkout.completed"
            ]
          },
          "created": { "type": "string", "format": "date-time" },
          "data": { "type": "object" }
        }
      },

      "Error": {
        "type": "object",
        "required": ["error", "message"],
        "properties": {
          "error": { "type": "string", "description": "Machine readable error code" },
          "message": { "type": "string", "description": "Human readable message" },
          "param": { "type": "string" },
          "request_id": { "type": "string" }
        }
      },

      "WaftpayErrorEnvelope": {
        "type": "object",
        "required": ["code", "status", "description"],
        "properties": {
          "code": {
            "type": "string",
            "description": "Application code. Can be a top-level code (e.g., 400.600) or a granular code (e.g., 404.001.000)."
          },
          "status": {
            "type": "string",
            "description": "Semantic status, e.g., REJECTED, FAILED, UNAUTHORIZED, FORBIDDEN, NOT_FOUND, ACCEPTED."
          },
          "description": {
            "type": "string",
            "description": "Human-readable description."
          },
          "data": {
            "type": "object",
            "description": "Additional details (may be empty).",
            "additionalProperties": true,
            "nullable": true
          }
        },
        "examples": {
          "notFoundGranular": {
            "summary": "404 with granular code",
            "value": {
              "code": "404.001.000",
              "status": "REJECTED",
              "description": "Requested resource not found",
              "data": {}
            }
          },
          "validationFailed": {
            "summary": "400 validation failed",
            "value": {
              "code": "400.100",
              "status": "REJECTED",
              "description": "Validation failed",
              "data": {
                "field_errors": [
                  {"field": "recipient.account", "message": "Invalid account"}
                ]
              }
            }
          },
          "unauthorized": {
            "summary": "401 failed authentication",
            "value": {
              "code": "400.200",
              "status": "REJECTED",
              "description": "Failed Authentication",
              "data": null
            }
          },
          "forbidden": {
            "summary": "403 failed authorization",
            "value": {
              "code": "403.300",
              "status": "REJECTED",
              "description": "Failed Authorization",
              "data": null
            }
          },
          "internal": {
            "summary": "500 internal server error",
            "value": {
              "code": "400.500",
              "status": "FAILED",
              "description": "Internal server error",
              "data": null
            }
          }
        }
      }
    },

    "parameters": {
      "XCustomSignature": {
        "name": "X-Custom-Signature",
        "in": "header",
        "required": true,
        "schema": { "type": "string" },
        "description": "Base64 RSA signature over: transaction.reference + transaction.amount + originator.country + recipient.service_code"
      }
    },

    "responses": {
      "BadRequest": {
        "description": "Bad request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "NotFound": {
        "description": "Resource not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "PayoutRemittanceAccepted202": {
        "description": "Accepted for processing",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/PayoutInitiationResponse" },
            "examples": {
              "accepted": {
                "value": {
                  "status": "200.100",
                  "code": "ACCEPTED",
                  "description": "Accepted for processing",
                  "data": {
                    "amount": 1000,
                    "total_charges": 0,
                    "total_amount": 1000,
                    "transaction_reference": "TXN213687756272200",
                    "payment_uuid": "8837988760786506492",
                    "payment_reference": "1V5ADJM5SO",
                    "time_received": "2025-04-04T02:20:44.967336Z"
                  }
                }
              }
            }
          }
        }
      },
      "PayoutRemittanceBadRequest400": {
        "description": "Validation Failed",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/WaftpayErrorEnvelope" },
            "examples": {
              "validationFailed": {
                "value": {
                  "code": "400.100",
                  "status": "REJECTED",
                  "description": "Validation failed",
                  "data": {
                    "field_errors": [
                      {"field": "transaction.timestamp", "message": "Must end with 'Z' (UTC)"}
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "PayoutRemittanceUnauthorized401": {
        "description": "Failed Authentication",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/WaftpayErrorEnvelope" },
            "examples": {
              "unauthorized": {
                "value": {
                  "code": "400.200",
                  "status": "REJECTED",
                  "description": "Failed Authentication",
                  "data": null
                }
              }
            }
          }
        }
      },
      "PayoutRemittanceForbidden403": {
        "description": "Failed Authorization",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/WaftpayErrorEnvelope" },
            "examples": {
              "forbidden": {
                "value": {
                  "code": "403.300",
                  "status": "REJECTED",
                  "description": "Failed Authorization",
                  "data": null
                }
              }
            }
          }
        }
      },
      "PayoutRemittanceNotFound404": {
        "description": "Resource Not Found",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/WaftpayErrorEnvelope" },
            "examples": {
              "notFoundGranular": {
                "value": {
                  "code": "404.001.000",
                  "status": "REJECTED",
                  "description": "Requested resource not found",
                  "data": {}
                }
              },
              "notFoundTopLevel": {
                "value": {
                  "code": "400.600",
                  "status": "REJECTED",
                  "description": "Resource not found",
                  "data": {}
                }
              }
            }
          }
        }
      },
      "PayoutRemittanceInternal500": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/WaftpayErrorEnvelope" },
            "examples": {
              "internal": {
                "value": {
                  "code": "400.500",
                  "status": "FAILED",
                  "description": "Internal server error",
                  "data": null
                }
              }
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Missing or invalid token",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Error" },
            "examples": {
              "unauthorized": {
                "value": {
                  "error": "unauthorized",
                  "message": "Missing or invalid Authorization header",
                  "request_id": "req_123"
                }
              }
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Unexpected server error",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Error" },
            "examples": {
              "error": {
                "value": {
                  "error": "internal_error",
                  "message": "An unexpected error occurred",
                  "request_id": "req_456"
                }
              }
            }
          }
        }
      }
    },

    "securitySchemes": {
      "bearerAuth": { "type": "http", "scheme": "bearer", "bearerFormat": "JWT" }
    }
  }
}